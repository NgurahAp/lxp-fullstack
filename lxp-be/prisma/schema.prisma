generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(student)
  token     String?  @db.VarChar(100)
  profile   String?
  resetToken     String?  @db.VarChar(100)
  resetTokenExpiration DateTime?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainings      Training[]
  trainingUsers  Training_Users[]
  certificates   Certificate[]
  
  @@map("users")
}

model Training {
  id           String   @id @default(uuid()) @db.VarChar(36)
  title        String   @db.VarChar(255)
  description  String?  @db.Text 
  image        String?  
  instructorId String
  // Certificate template configuration
  certificateTemplate String? @db.Text // JSON untuk konfigurasi template sertifikat
  minimumScore Int @default(70) // Minimum score untuk dapat sertifikat
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  instructor   User   @relation(fields: [instructorId], references: [id])
  meetings     Meeting[]
  users        Training_Users[]
  certificates Certificate[]

  @@map("trainings")
}

model Training_Users {
  id         String   @id @default(uuid()) @db.VarChar(36)
  trainingId String
  userId     String
  status     Status   @default(enrolled)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  training Training @relation(fields: [trainingId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  scores   Score[]
  moduleSubmissions ModuleSubmission[]
  quizSubmissions QuizSubmission[]
  taskSubmissions TaskSubmission[]

  @@map("training_users")
}

model Meeting {
  id           String   @id @default(uuid()) @db.VarChar(36)
  trainingId   String
  title        String   @db.VarChar(255)
  meetingDate  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  training Training @relation(fields: [trainingId], references: [id])
  modules  Module[]
  quizzes  Quiz[]
  tasks    Task[]
  scores   Score[]

  @@map("meetings")
}

model Module {
  id          String   @id @default(uuid()) @db.VarChar(36)
  meetingId   String
  title       String   @db.VarChar(255)
  content     String   @db.VarChar(255)  // PDF file path
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id])
  submissions ModuleSubmission[]

  @@map("modules")
}

model ModuleSubmission {
  id           String   @id @default(uuid()) @db.VarChar(36)
  moduleId     String
  trainingUserId String
  answer       String?
  score        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  module       Module @relation(fields: [moduleId], references: [id])
  trainingUser Training_Users @relation(fields: [trainingUserId], references: [id])

  @@map("module_submissions")
}

model Quiz {
  id         String   @id @default(uuid()) @db.VarChar(36)
  meetingId  String
  title      String   @db.VarChar(255)
  questions  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id])
  submissions QuizSubmission[]

  @@map("quizzes")
}

model QuizSubmission {
  id           String   @id @default(uuid()) @db.VarChar(36)
  quizId       String
  trainingUserId String
  answers      Json?
  score        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  quiz         Quiz @relation(fields: [quizId], references: [id])
  trainingUser Training_Users @relation(fields: [trainingUserId], references: [id])

  @@map("quiz_submissions")
}

model Task {
  id           String   @id @default(uuid()) @db.VarChar(36)
  meetingId    String
  title        String   @db.VarChar(255)
  taskQuestion String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  meeting     Meeting @relation(fields: [meetingId], references: [id])
  submissions TaskSubmission[]

  @@map("tasks")
}

model TaskSubmission {
  id           String   @id @default(uuid()) @db.VarChar(36)
  taskId       String
  trainingUserId String
  answer       String?  @db.VarChar(255)
  score        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  task         Task @relation(fields: [taskId], references: [id])
  trainingUser Training_Users @relation(fields: [trainingUserId], references: [id])

  @@map("task_submissions")
}

model Score {
  id            String   @id @default(uuid()) @db.VarChar(36)
  trainingUserId String
  meetingId     String
  moduleScore   Int      @default(0)
  quizScore     Int      @default(0)
  taskScore     Int      @default(0)
  totalScore    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  trainingUser Training_Users @relation(fields: [trainingUserId], references: [id])
  meeting      Meeting        @relation(fields: [meetingId], references: [id])

  @@map("scores")
}

// Model baru untuk sertifikat
model Certificate {
  id            String   @id @default(uuid()) @db.VarChar(36)
  certificateNumber String @unique @db.VarChar(100) // Nomor sertifikat unik
  trainingId    String
  userId        String
  issuedDate    DateTime @default(now())
  expiryDate    DateTime? // Jika sertifikat bisa expired
  finalScore    Int      // Skor akhir yang diperoleh
  status        CertificateStatus @default(active)
  filePath      String?  @db.VarChar(500) // Path file PDF sertifikat yang sudah digenerate
  metadata      Json?    // Data tambahan seperti detail konfigurasi sertifikat
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  training Training @relation(fields: [trainingId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([trainingId, userId]) // Satu user hanya bisa punya satu sertifikat per training
  @@map("certificates")
}

enum Role {
  admin
  instructor
  student
}

enum Status {
  enrolled
  completed
  dropped
}

enum CertificateStatus {
  active
  revoked
  expired
}